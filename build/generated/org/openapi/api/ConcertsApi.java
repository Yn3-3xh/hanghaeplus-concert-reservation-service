/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapi.api;

import org.openapi.model.AvailableSeatsHttpResponse;
import org.openapi.model.QueueEnrollmentHttpResponse;
import org.openapi.model.QueuePositionHttpResponse;
import org.openapi.model.SeatReservationHttpResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-17T19:17:29.458938+09:00[Asia/Seoul]")
@Validated
@Tag(name = "concerts", description = "the concerts API")
public interface ConcertsApi {

    /**
     * POST /concerts/{concertId}/queues : 대기열 추가 API
     *
     * @param tokenId  (required)
     * @param concertId  (required)
     * @return 좌석 임시 배정 완료 (status code 200)
     */
    @Operation(
        operationId = "enrollConcertQueue",
        summary = "대기열 추가 API",
        responses = {
            @ApiResponse(responseCode = "200", description = "좌석 임시 배정 완료", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueEnrollmentHttpResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/concerts/{concertId}/queues",
        produces = { "application/json" }
    )
    
    ResponseEntity<QueueEnrollmentHttpResponse> enrollConcertQueue(
        @NotNull @Parameter(name = "tokenId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "tokenId", required = true) String tokenId,
        @Parameter(name = "concertId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("concertId") Long concertId
    );


    /**
     * GET /concerts/{concertId}/queues : 대기열 확인 API
     *
     * @param tokenId  (required)
     * @param concertId  (required)
     * @return 대기열 남은 순서 반환 (status code 200)
     */
    @Operation(
        operationId = "getConcertQueuePosition",
        summary = "대기열 확인 API",
        responses = {
            @ApiResponse(responseCode = "200", description = "대기열 남은 순서 반환", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueuePositionHttpResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/concerts/{concertId}/queues",
        produces = { "application/json" }
    )
    
    ResponseEntity<QueuePositionHttpResponse> getConcertQueuePosition(
        @NotNull @Parameter(name = "tokenId", description = "", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "tokenId", required = true) String tokenId,
        @Parameter(name = "concertId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("concertId") Long concertId
    );


    /**
     * POST /concerts/{concertId}/details/{detailId}/seats/{seatId} : 좌석 예약 API
     *
     * @param concertId  (required)
     * @param detailId  (required)
     * @param seatId  (required)
     * @param tokenId  (optional)
     * @return 좌석 임시 배정 완료 (status code 200)
     */
    @Operation(
        operationId = "reserveConcertSeat",
        summary = "좌석 예약 API",
        responses = {
            @ApiResponse(responseCode = "200", description = "좌석 임시 배정 완료", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SeatReservationHttpResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/concerts/{concertId}/details/{detailId}/seats/{seatId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<SeatReservationHttpResponse> reserveConcertSeat(
        @Parameter(name = "concertId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("concertId") Long concertId,
        @Parameter(name = "detailId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("detailId") Long detailId,
        @Parameter(name = "seatId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("seatId") Long seatId,
        @Parameter(name = "tokenId", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "tokenId", required = false) String tokenId
    );


    /**
     * GET /concerts/{concertId}/available-dates : 예약 가능 날짜 조회 API
     *
     * @param concertId  (required)
     * @param tokenId  (optional)
     * @return 예약 가능한 날짜 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "selectConcertAvailableDates",
        summary = "예약 가능 날짜 조회 API",
        responses = {
            @ApiResponse(responseCode = "200", description = "예약 가능한 날짜 목록 반환", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/concerts/{concertId}/available-dates",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<String>> selectConcertAvailableDates(
        @Parameter(name = "concertId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("concertId") Long concertId,
        @Parameter(name = "tokenId", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "tokenId", required = false) String tokenId
    );


    /**
     * GET /concerts/{concertId}/details/{detailId}/available-seats : 예약 가능 좌석 조회 API
     *
     * @param concertId  (required)
     * @param detailId  (required)
     * @param tokenId  (optional)
     * @return 예약 가능한 좌석 목록 반환 (status code 200)
     */
    @Operation(
        operationId = "selectConcertAvailableSeats",
        summary = "예약 가능 좌석 조회 API",
        responses = {
            @ApiResponse(responseCode = "200", description = "예약 가능한 좌석 목록 반환", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AvailableSeatsHttpResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/concerts/{concertId}/details/{detailId}/available-seats",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<AvailableSeatsHttpResponse>> selectConcertAvailableSeats(
        @Parameter(name = "concertId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("concertId") Long concertId,
        @Parameter(name = "detailId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("detailId") Long detailId,
        @Parameter(name = "tokenId", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "tokenId", required = false) String tokenId
    );

}
